buildscript {
    ext {
        springBootVersion = '1.5.6.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

springBoot {
    mainClass = "com.papaolabs.api.interfaces.PapaoApiApplication"
}

repositories {
    mavenCentral()
}


dependencies {
    compile 'org.springframework.boot:spring-boot-starter:1.5.6.RELEASE',
            'org.springframework.boot:spring-boot-starter-validation:1.5.6.RELEASE',
            'org.springframework.boot:spring-boot-starter-web:1.5.6.RELEASE',
            'org.springframework.boot:spring-boot-starter-data-jpa:1.5.6.RELEASE',
            'org.springframework.boot:spring-boot-starter-freemarker:1.5.6.RELEASE',
            'org.springframework.cloud:spring-cloud-starter-feign:1.3.4.RELEASE',
            'org.springframework.cloud:spring-cloud-starter-hystrix:1.3.4.RELEASE',
            'com.github.ulisesbocchio:jasypt-spring-boot-starter:1.14',
            'io.springfox:springfox-swagger2:2.5.0',
            'io.springfox:springfox-swagger-ui:2.5.0'

    compile 'org.mariadb.jdbc:mariadb-java-client:2.1.2'

    compile ("com.querydsl:querydsl-core:4.1.4")
    compile ("com.querydsl:querydsl-apt:4.1.4")
    compile ("com.querydsl:querydsl-jpa:4.1.4")

    compile 'org.projectlombok:lombok',
            'org.apache.commons:commons-lang3:3.6'

    // feign
    compile 'io.github.openfeign:feign-httpclient:9.5.1',
            'io.github.openfeign:feign-okhttp:9.3.1',
            'io.github.openfeign:feign-gson:9.3.1',
            'io.github.openfeign:feign-slf4j:9.3.1',
            'io.github.openfeign:feign-jaxb:9.3.1'

    runtime 'com.h2database:h2'

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

def queryDslOutput = file("src-gen/main/java")

sourceSets {
    main {
        java {
            srcDir "src-gen/main/java"
        }
    }
}

task generateQueryDSL(type: JavaCompile, group: 'build') {
    doFirst {
        if (!queryDslOutput.exists()) {
            logger.info("Creating `$queryDslOutput` directory")

            if (!queryDslOutput.mkdirs()) {
                throw new InvalidUserDataException("Unable to create `$queryDslOutput` directory")
            }
        }
    }

    source = sourceSets.main.java
    classpath = configurations.compile
    options.compilerArgs = [
            "-proc:only",
            "-processor",
            "com.querydsl.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = queryDslOutput
}

compileTestJava.dependsOn(generateQueryDSL)

clean {
    delete queryDslOutput
}